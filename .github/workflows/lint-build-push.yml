name: lint-build-push

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]
  release:
    types: [published]

env:
  IMAGE_NAME: bgauduch/cod2server
  IMAGE_TAG: latest

jobs:
  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@2332a7b74a6de0dda2e2221d575162eba76ba5e5 # v3.3.0
        with:
          dockerfile: Dockerfile

      - name: Lint shell scripts
        uses: ludeeus/action-shellcheck@00cae500b08a931fb5698e11e79bfbd38e612a38 # v2.0.0
        with:
          scandir: './scripts'

  build:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Override image tag with branch name if not on master
        if: contains(github.ref, 'master') != true
        run: echo "IMAGE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Build image
        run: docker image build . --file Dockerfile --build-arg COD2_VERSION="1_3" --build-arg COD2_LNXDED_TYPE="_nodelay_va_loc" --tag $IMAGE_NAME:$IMAGE_TAG

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@16140ae1a102900babc80a33c44059580f687047 # v3.28.0
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: save image
        run: docker image save -o image-$IMAGE_TAG.tar $IMAGE_NAME:$IMAGE_TAG

      - name: Upload image artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.5.0
        with:
          name: image-${{ env.IMAGE_TAG }}
          path: image-${{ env.IMAGE_TAG }}.tar

  push:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Override image tag with branch name if not on master
        if: contains(github.ref, 'master') != true
        run: echo "IMAGE_TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: download image artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: image-${{ env.IMAGE_TAG }}

      - name: load image
        run: docker image load --input image-$IMAGE_TAG.tar

      - name: Login to Docker Hub registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push image to registry
        run: docker push $IMAGE_NAME:$IMAGE_TAG

  build_all:
    if: contains(github.ref, 'master') || github.event.release
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        versions:
          - { cod2_version: "1_0", cod2_lnxded_type: "a" }
          - { cod2_version: "1_0", cod2_lnxded_type: "a_va" }
          - { cod2_version: "1_0", cod2_lnxded_type: "a_va_loc" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_nodelay" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_nodelay_va_loc" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_patch_va_loc" }
          - { cod2_version: "1_3", cod2_lnxded_type: "" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_cracked" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_nodelay" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_patch_va_loc" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_nodelay_va_loc" }

    env:
      COD2_VERSION: ${{ matrix.versions.cod2_version }}
      COD2_LNXDED_TYPE: ${{ matrix.versions.cod2_lnxded_type }}
      IMAGE_TAG: ${{ matrix.versions.cod2_version }}${{ matrix.versions.cod2_lnxded_type }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Build image
        run: docker image build . --file Dockerfile --build-arg COD2_VERSION=$COD2_VERSION --build-arg COD2_LNXDED_TYPE=$COD2_LNXDED_TYPE --tag $IMAGE_NAME:$IMAGE_TAG

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results-${{ env.IMAGE_TAG }}.sarif'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@16140ae1a102900babc80a33c44059580f687047 # v3.28.0
        if: always()
        with:
          sarif_file: 'trivy-results-${{ env.IMAGE_TAG }}.sarif'
          category: 'trivy-${{ env.IMAGE_TAG }}'

      - name: save image
        run: docker image save -o image-$IMAGE_TAG.tar $IMAGE_NAME:$IMAGE_TAG

      - name: Upload image artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.5.0
        with:
          name: image-${{ env.IMAGE_TAG }}
          path: image-${{ env.IMAGE_TAG }}.tar

  push_all:
    if: github.event.release
    runs-on: ubuntu-latest
    needs: build_all

    strategy:
      matrix:
        versions:
          - { cod2_version: "1_0", cod2_lnxded_type: "a" }
          - { cod2_version: "1_0", cod2_lnxded_type: "a_va" }
          - { cod2_version: "1_0", cod2_lnxded_type: "a_va_loc" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_nodelay" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_nodelay_va_loc" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_patch_va_loc" }
          - { cod2_version: "1_3", cod2_lnxded_type: "" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_cracked" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_nodelay" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_patch_va_loc" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_nodelay_va_loc" }

    env:
      IMAGE_TAG: ${{ matrix.versions.cod2_version }}${{ matrix.versions.cod2_lnxded_type }}

    steps:
      - name: download image artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: image-${{ env.IMAGE_TAG }}

      - name: load image
        run: docker image load --input image-$IMAGE_TAG.tar

      - name: Login to Docker Hub registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push image to registry
        run: docker push $IMAGE_NAME:$IMAGE_TAG
