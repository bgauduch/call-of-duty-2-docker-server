name: Build, Test & Push

on:
  pull_request:
    paths:
      - 'Dockerfile'
      - 'bin/**'
      - 'lib/**'
      - 'docker-compose.yaml'
      - 'tests/**'
      - '.github/workflows/build-*.yml'
      - '.github/config/variants.json'
      - '.github/actions/**'
  push:
    branches:
      - master
    paths:
      - 'Dockerfile'
      - 'bin/**'
      - 'lib/**'
      - 'docker-compose.yaml'
      - 'tests/**'
      - '.github/workflows/build-*.yml'
      - '.github/config/variants.json'
      - '.github/actions/**'
  release:
    types: [published]

permissions:
  contents: read
  security-events: write

concurrency:
  # Use different concurrency groups for releases vs regular pushes
  # Never cancel release builds, but allow canceling PR builds
  group: ${{ github.event_name == 'release' && format('release-{0}', github.sha) || format('build-{0}', github.head_ref || github.ref_name) }}
  cancel-in-progress: ${{ github.event_name != 'release' }}

jobs:
  # Load configuration from centralized config file
  setup:
    name: Load Configuration
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.config.outputs.image_name }}
      default_variant: ${{ steps.config.outputs.default_variant }}
      variants_matrix: ${{ steps.config.outputs.variants_matrix }}
      artifact_retention_days: ${{ steps.config.outputs.artifact_retention_days }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Setup configuration
        id: config
        uses: ./.github/actions/setup-config

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: setup

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.variants_matrix) }}

    env:
      IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
      COD2_VERSION: ${{ matrix.cod2_version }}
      COD2_LNXDED_TYPE: ${{ matrix.cod2_lnxded_type }}
      IMAGE_TAG: ${{ matrix.cod2_version }}${{ matrix.cod2_lnxded_type }}
      DOCKER_BUILDKIT: 1

    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: Build image
        id: build
        uses: docker/build-push-action@4f58ea79222b3b9dc2c8bbdd6debcef730109a75 # v6.9.0
        with:
          context: .
          file: ./Dockerfile
          build-args: |
            COD2_VERSION=${{ env.COD2_VERSION }}
            COD2_LNXDED_TYPE=${{ env.COD2_LNXDED_TYPE }}
          tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # v0.33.1
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          format: 'sarif'
          output: 'trivy-results-${{ env.IMAGE_TAG }}.sarif'

      - name: Upload Trivy results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@42213152a85ae7569bdb6bec7bcd74cd691bfe41 # v3.28.0
        with:
          sarif_file: 'trivy-results-${{ env.IMAGE_TAG }}.sarif'
          category: 'trivy-${{ env.IMAGE_TAG }}'

      - name: Save image artifact
        run: docker image save -o image-${{ env.IMAGE_TAG }}.tar ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Upload image artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.5.0
        with:
          name: image-${{ env.IMAGE_TAG }}
          path: image-${{ env.IMAGE_TAG }}.tar
          retention-days: ${{ needs.setup.outputs.artifact_retention_days }}

  test-structure:
    name: Container Structure Tests
    runs-on: ubuntu-latest
    needs: [setup, build]

    strategy:
      fail-fast: false
      # Test all variants
      matrix: ${{ fromJSON(needs.setup.outputs.variants_matrix) }}

    env:
      IMAGE_TAG: ${{ matrix.cod2_version }}${{ matrix.cod2_lnxded_type }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Load Docker image
        uses: ./.github/actions/load-docker-image
        with:
          image_tag: ${{ env.IMAGE_TAG }}
          image_name: ${{ needs.setup.outputs.image_name }}

      - name: Run container structure tests
        uses: plexsystems/container-structure-test-action@cc689017bbb16a3c98e6e87b0e07f92ad35a9df1 # v0.3.0
        with:
          image: ${{ needs.setup.outputs.image_name }}:${{ env.IMAGE_TAG }}
          config: tests/container-structure-test.yaml

  test-health:
    name: Container Health & Runtime Tests (Optional)
    runs-on: ubuntu-latest
    needs: [setup, build]
    continue-on-error: true

    strategy:
      fail-fast: false
      # Test all variants for health checks
      matrix: ${{ fromJSON(needs.setup.outputs.variants_matrix) }}

    env:
      IMAGE_TAG: ${{ matrix.cod2_version }}${{ matrix.cod2_lnxded_type }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Load Docker image
        uses: ./.github/actions/load-docker-image
        with:
          image_tag: ${{ env.IMAGE_TAG }}
          image_name: ${{ needs.setup.outputs.image_name }}

      - name: Run container health check test
        timeout-minutes: 3
        run: |
          chmod +x tests/test-container-health.sh
          ./tests/test-container-health.sh ${{ needs.setup.outputs.image_name }}:${{ env.IMAGE_TAG }} || true
          echo "Note: Health check may fail without game files - this is expected in CI"

  push-latest:
    name: Push Latest Tag
    runs-on: ubuntu-latest
    needs: [setup, test-structure]
    # Only run on successful push to master (not PRs or releases)
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Load Docker image
        uses: ./.github/actions/load-docker-image
        with:
          image_tag: ${{ needs.setup.outputs.default_variant }}
          image_name: ${{ needs.setup.outputs.image_name }}

      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate Docker tags
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ needs.setup.outputs.image_name }}
          tags: |
            type=raw,value=latest

      - name: Tag and push to Docker Hub
        env:
          IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
          IMAGE_TAG: ${{ needs.setup.outputs.default_variant }}
        run: |
          # Tag with generated metadata
          for tag in ${{ steps.meta.outputs.tags }}; do
            docker tag ${IMAGE_NAME}:${IMAGE_TAG} "$tag"
            docker push "$tag"
            echo "✓ Pushed $tag"
          done

  push-release:
    name: Push Release Tags
    runs-on: ubuntu-latest
    needs: [setup, test-structure]
    # Only run on successful release (after tests pass)
    if: github.event_name == 'release'

    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.setup.outputs.variants_matrix) }}

    env:
      IMAGE_TAG: ${{ matrix.cod2_version }}${{ matrix.cod2_lnxded_type }}

    steps:
      - name: Check out the repo
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.2.2

      - name: Load Docker image
        uses: ./.github/actions/load-docker-image
        with:
          image_tag: ${{ env.IMAGE_TAG }}
          image_name: ${{ needs.setup.outputs.image_name }}

      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@8e5442c4ef9f78752691e2d8f8d19755c6f78e81 # v5.5.1
        with:
          images: ${{ needs.setup.outputs.image_name }}
          tags: |
            # Full semver with variant (immutable)
            type=semver,pattern={{version}}-${{ env.IMAGE_TAG }}
            # Semver tags (mutable)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Server variant tag
            type=raw,value=${{ env.IMAGE_TAG }}
            # Latest for default variant only
            type=raw,value=latest,enable=${{ env.IMAGE_TAG == needs.setup.outputs.default_variant }}

      - name: Push all tags to Docker Hub
        env:
          IMAGE_NAME: ${{ needs.setup.outputs.image_name }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          echo "Pushing tags for variant ${{ env.IMAGE_TAG }}..."

          # Parse and push each tag
          echo "$TAGS" | while IFS= read -r tag; do
            if [ -n "$tag" ]; then
              docker tag ${IMAGE_NAME}:${{ env.IMAGE_TAG }} "$tag"
              docker push "$tag"
              echo "✓ Pushed $tag"
            fi
          done

          echo "All tags pushed successfully for ${{ env.IMAGE_TAG }}"
