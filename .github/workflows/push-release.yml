name: Push & Release

on:
  # Trigger on successful build-test workflow completion
  # This runs after build-test completes for:
  # - Push to master (pushes 'latest' tag)
  # - Release published (pushes semantic version tags)
  workflow_run:
    workflows: ["Build & Test"]
    types:
      - completed

permissions:
  contents: read

concurrency:
  # Sequential deploys - never cancel release pushes
  group: push-release-${{ github.ref }}
  cancel-in-progress: false

env:
  IMAGE_NAME: bgauduch/cod2server

jobs:
  push-latest:
    name: Push Latest Tag
    runs-on: ubuntu-latest
    # Only run when workflow_run was triggered by push to master (not releases)
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'push' &&
      github.event.workflow_run.head_branch == 'master'

    env:
      # Default variant for 'latest' tag
      IMAGE_TAG: 1_3_nodelay_va_loc

    steps:
      - name: Download image artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: image-${{ env.IMAGE_TAG }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Load Docker image
        run: docker image load --input image-${{ env.IMAGE_TAG }}.tar

      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Tag and push as latest
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.IMAGE_NAME }}:latest
          echo "✓ Pushed ${{ env.IMAGE_NAME }}:latest"

  push-release:
    name: Push Release Tags
    runs-on: ubuntu-latest
    # Only run when workflow_run was triggered by a release event
    if: |
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'release'

    strategy:
      fail-fast: false
      matrix:
        versions:
          - { cod2_version: "1_0", cod2_lnxded_type: "a" }
          - { cod2_version: "1_0", cod2_lnxded_type: "a_va" }
          - { cod2_version: "1_0", cod2_lnxded_type: "a_va_loc" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_nodelay" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_nodelay_va_loc" }
          - { cod2_version: "1_2", cod2_lnxded_type: "c_patch_va_loc" }
          - { cod2_version: "1_3", cod2_lnxded_type: "" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_cracked" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_nodelay" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_patch_va_loc" }
          - { cod2_version: "1_3", cod2_lnxded_type: "_nodelay_va_loc" }

    env:
      IMAGE_TAG: ${{ matrix.versions.cod2_version }}${{ matrix.versions.cod2_lnxded_type }}

    steps:
      - name: Download image artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: image-${{ env.IMAGE_TAG }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Load Docker image
        run: docker image load --input image-${{ env.IMAGE_TAG }}.tar

      - name: Login to Docker Hub
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Extract version components
        id: version
        env:
          HEAD_BRANCH: ${{ github.event.workflow_run.head_branch }}
        run: |
          # Extract version from head_branch which contains the tag (e.g., v4.2.0)
          VERSION="${HEAD_BRANCH}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix

          echo "full=$VERSION" >> $GITHUB_OUTPUT

          # Extract major.minor (e.g., 4.2.0 -> 4.2)
          MINOR="${VERSION%.*}"
          echo "minor=$MINOR" >> $GITHUB_OUTPUT

          # Extract major (e.g., 4.2.0 -> 4)
          MAJOR="${MINOR%.*}"
          echo "major=$MAJOR" >> $GITHUB_OUTPUT

          echo "Extracted versions:"
          echo "  Full: $VERSION"
          echo "  Minor: $MINOR"
          echo "  Major: $MAJOR"

      - name: Generate and push semantic version tags
        run: |
          IMAGE="${{ env.IMAGE_NAME }}"
          TAG="${{ env.IMAGE_TAG }}"
          FULL_VERSION="${{ steps.version.outputs.full }}"
          MINOR_VERSION="${{ steps.version.outputs.minor }}"
          MAJOR_VERSION="${{ steps.version.outputs.major }}"

          echo "Tagging and pushing images..."

          # Immutable tags (never overwrite)
          # Full semver with variant (e.g., v4.2.0-1_3_nodelay_va_loc)
          IMMUTABLE_TAG="${FULL_VERSION}-${TAG}"
          docker tag ${IMAGE}:${TAG} ${IMAGE}:${IMMUTABLE_TAG}
          docker push ${IMAGE}:${IMMUTABLE_TAG}
          echo "✓ Pushed ${IMAGE}:${IMMUTABLE_TAG} (immutable)"

          # Mutable tags (overwrite with latest patch/minor)
          # Full semver (e.g., v4.2.0)
          docker tag ${IMAGE}:${TAG} ${IMAGE}:${FULL_VERSION}
          docker push ${IMAGE}:${FULL_VERSION}
          echo "✓ Pushed ${IMAGE}:${FULL_VERSION} (mutable)"

          # Minor version (e.g., v4.2)
          docker tag ${IMAGE}:${TAG} ${IMAGE}:${MINOR_VERSION}
          docker push ${IMAGE}:${MINOR_VERSION}
          echo "✓ Pushed ${IMAGE}:${MINOR_VERSION} (mutable)"

          # Major version (e.g., v4)
          docker tag ${IMAGE}:${TAG} ${IMAGE}:${MAJOR_VERSION}
          docker push ${IMAGE}:${MAJOR_VERSION}
          echo "✓ Pushed ${IMAGE}:${MAJOR_VERSION} (mutable)"

          # Server variant tag (e.g., 1_3_nodelay_va_loc)
          docker push ${IMAGE}:${TAG}
          echo "✓ Pushed ${IMAGE}:${TAG} (server variant)"

          # For the default variant, also update 'latest'
          if [ "${TAG}" = "1_3_nodelay_va_loc" ]; then
            docker tag ${IMAGE}:${TAG} ${IMAGE}:latest
            docker push ${IMAGE}:latest
            echo "✓ Pushed ${IMAGE}:latest (default variant)"
          fi

          echo ""
          echo "Summary for variant ${TAG}:"
          echo "  - ${IMMUTABLE_TAG} (immutable - full version + variant)"
          echo "  - ${FULL_VERSION} (mutable - latest patch)"
          echo "  - ${MINOR_VERSION} (mutable - latest minor)"
          echo "  - ${MAJOR_VERSION} (mutable - latest major)"
          echo "  - ${TAG} (mutable - latest build of variant)"
          if [ "${TAG}" = "1_3_nodelay_va_loc" ]; then
            echo "  - latest (mutable - default variant)"
          fi
